--- 
# Tiny Tapeout project information
project:
  wokwi_id:    376553022662786049        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Arfan Ghani"      # Your name
  title:        "Cortico Neuro 1"      # Project title
  language:     "Wokwi" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Information processing in the brain occurs through a sophisticated network of neurons that communicate using reliable electrical impulses, commonly known as action potentials or spikes. As a result, information is encoded as a sequence of events unfolding over continuous time, rather than relying on signal amplitude. Investigating how information is represented and processed as these spike trains, referred to as the neural coding problem, presents a significant challenge within the field of brain-inspired computing. Given the current emphasis on sparseness in signal processing, spike trains are particularly attractive. To explore the variability and the corresponding time stamps, this chip has implemented several test clusters featuring various spike trains. "      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The input clock is connected with the inputs of the neuron clusters. The bi-directional pins are provided where external input stimulus could be provided. The raster spiking plots are generated to observe the variability of different spiking neuron clusters. 

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Provide input clock frequencies to the neuron clusters and observe the output from the PCB header pins through the oscilloscope.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - CLOCK Attached to the on-board clock
    - INO Connected with a 1-bit FF
    - IN1 external input to the MUX
    - IN2 Enable signal to the MUX to pick from either IN1 or the on-chip clock (0->CLK and 1 - > IN1 )
    - IN3 NC
    - IN4 Input to the (6x6x6) cluster 
    - IN5 Input to the (6x6x6) cluster
    - IN6 Input to the (6x6x6) cluster
    - IN7 Input to the (6x6x6) cluster
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - OUT0 on-chip CLOCK 
    - OUT1 Output from the LFSR
    - OUT2 Output from 2-bit FF 
    - OUT3 Output from 3-bit FF
    - OUT4 Output from 4-bit FF
    - OUT5 Output from 5-bit FF
    - OUT6 Output from 6-bit FF 
    - OUT7 MUX output)
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - D0  OUTPUT from a 1-bit FF
    - D7 OUTPUT from (1x3x3) cluster
    - D1 OUTPUT from the (5X5) cluster as a raster plot 
    - D2 OUTPUT from (6x6x6) cluster
    - D3 OUTPUT from (6x6x6) cluster
    - D4 OUTPUT from (6x6x6) cluster
    - D5 INPUT to the (6x6x6) cluster
    - D6 INPUT to the (6x6x6) cluster

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
